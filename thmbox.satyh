@require: fss/fss
@require: fss/style
@require: color
@require: gr

type thmbox-config = (|
  line-gap: length;
  thick: length;
  underline: length;
  theorem-font: style list;
  number-format: int -> string;
  theorem-format: inline-text -> inline-text;
|)

module Thmbox: sig
  val counter: int ref
  val default-config: thmbox-config
  val thmbox-scheme: thmbox-config -> context -> inline-boxes -> block-text -> block-boxes
  val theorem-scheme: thmbox-config -> context -> inline-text -> int ref -> string ?-> inline-text ?-> block-text -> block-boxes
  direct +theorem: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +definition: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +lemma: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +proposition: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +corollary: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
end = struct
  let-mutable counter <- 0

  let default-config =
    (|
      line-gap = 7pt;
      thick = 0.8pt;
      underline = 30pt;
      theorem-font = [bold;];
      number-format = arabic;
      theorem-format = (fun title -> { (#title;) });
    |)

  let thmbox-scheme config ctx title inner =
    let line-gap = config#line-gap in
    let thick = config#thick in
    let font-size = (get-font-size ctx) in
    let font-size-half = (font-size *' 0.5) in
    let title =
      let line (x, y) w h d =
        [
          stroke thick Color.black (Gr.line (x, y -' d) (x +' w, y -' d));
        ] in
      let inline-title = inline-frame-inner (2pt, 2pt, 2pt, 2pt) line title in line-break true true ctx inline-title in
    let inner =
      let line (x, y) w h d =
        [
          stroke thick Color.black (Gr.line (x +' font-size-half, y -' line-gap) (x +' font-size-half, y +' h +' line-gap));
        ] in
      let pads = (font-size, 0pt, 0pt, 0pt) in
      let decoset = (line, line, line, line) in block-frame-breakable ctx pads decoset (fun ctx -> read-block ctx inner) in
    let fin =
      let fin-inline =
        inline-graphics 0pt 0pt 0pt (fun (x, y) -> [
          stroke thick Color.black (Gr.line (x +' font-size-half, y) (x +' font-size-half +' config#underline, y));
        ]) in line-break true true ctx fin-inline in
    let result = title +++ inner +++ fin in result

  let theorem-scheme config ctx kind counter ?:label ?:title inner =
    let font-size = get-font-size ctx in
    let space = inline-skip (font-size *' 0.5) in
    let apply-font text = { \font-style (config#theorem-font) { #text; } } in
    let () = counter <- !counter + 1 in
    let () =
      match label with
        | None -> ()
        | Some(label) -> register-cross-reference (label ^ `:num`) (config#number-format !counter) in
    let kind = read-inline ctx (apply-font kind) in
    let number =
      let result = space ++ read-inline ctx (apply-font (embed-string (config#number-format !counter))) in result in
    let title =
      match title with
        | None -> kind ++ number
        | Some(title) -> kind ++ number ++ space ++ (read-inline ctx (apply-font (config#theorem-format title))) in
    let result = thmbox-scheme config ctx title inner in result

  let-block ctx +theorem = theorem-scheme default-config ctx { Theorem } counter
  let-block ctx +definition = theorem-scheme default-config ctx { Definition } counter
  let-block ctx +lemma = theorem-scheme default-config ctx { Lemma } counter
  let-block ctx +proposition = theorem-scheme default-config ctx { Proposition } counter
  let-block ctx +corollary = theorem-scheme default-config ctx { Corollary } counter
end
