@require: class-jlreq/jlreq
@require: azmath/azmath
@require: figbox/figbox
@import: thmbox

let-math \mod = math-char MathOp `mod`
let-math \lt = ${<}
let-math \gt = ${>}

module Popopo: sig
  val caption-fig: FigBox.figbox -> string ?-> inline-text -> FigBox.figbox
  direct +set-section-counter: [int] block-cmd
  direct +set-subsection-counter: [int] block-cmd
  direct +eqn: [math] block-cmd
  direct \eqn: [math] inline-cmd
  direct +align: [math list] block-cmd
  direct \align: [math list] inline-cmd
  direct +gather: [math list] block-cmd
  direct \gather: [math list] inline-cmd
  direct +thm: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +def: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +lem: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +prop: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +cor: [
    string?;
    inline-text?;
    block-text;
  ] block-cmd
  direct +proof: [
    inline-text?;
    block-text;
  ] block-cmd
  direct +exapmle: [
    inline-text?;
    block-text;
  ] block-cmd
  direct +remark: [
    inline-text?;
    block-text;
  ] block-cmd
  direct +note: [
    inline-text?;
    block-text;
  ] block-cmd
  direct \figref: [string] inline-cmd
end = struct
  let-block ctx +set-section-counter n =
    let update number = number <- n in
    let () = update JLReq.section-counter in block-nil
  let-block ctx +set-subsection-counter n =
    let update number = number <- n in
    let () = update JLReq.subsection-counter in block-nil
  let-block ctx +eqn inner =
    read-block ctx '<
      +AZMathEquation.eqn ?:(AZMathEquation.notag) (inner);
    >
  let-block ctx +align inner =
    read-block ctx '<
      +AZMathEquation.align ?:(AZMathEquation.notag) (inner);
    >
  let-block ctx +gather inner =
    read-block ctx '<
      +AZMathEquation.gather ?:(AZMathEquation.notag) (inner);
    >

  let-inline ctx \eqn inner = read-inline ctx { \AZMathEquation.eqn ?:(AZMathEquation.notag) (inner); }
  let-inline ctx \align inner = read-inline ctx { \AZMathEquation.align ?:(AZMathEquation.notag) (inner); }
  let-inline ctx \gather inner = read-inline ctx { \AZMathEquation.gather ?:(AZMathEquation.notag) (inner); }

  let thmbox-config =
    (|
      Thmbox.default-config with number-format = (fun n -> (arabic !JLReq.section-counter) ^ `.` ^ (arabic n));
      theorem-format = (fun str -> str);
    |)

  let-block ctx +thm = Thmbox.theorem-scheme thmbox-config ctx { Thm } Thmbox.counter
  let-block ctx +def = Thmbox.theorem-scheme thmbox-config ctx { Def } Thmbox.counter
  let-block ctx +lem = Thmbox.theorem-scheme thmbox-config ctx { Lem } Thmbox.counter
  let-block ctx +prop = Thmbox.theorem-scheme thmbox-config ctx { Prop } Thmbox.counter
  let-block ctx +cor = Thmbox.theorem-scheme thmbox-config ctx { Cor } Thmbox.counter
  let-block ctx +proof =
    let font-size = get-font-size ctx in
    let size = font-size *' 0.8 in
    let qedsymbol =
      inline-graphics size size 0pt (fun (x, y) -> [
        stroke 0.5pt Color.black (Gr.rectangle (x, y) (x +' size, y +' size));
      ]) in
      JLReqProof.proof-scheme ctx (|
        qedsymbol = (fun _ -> qedsymbol);
        space-after-label = ~(jlreq-length @`1zw`);
        proofname = { Proof: };
        font-label = [bold;];
      |)

  let example-config =
    (|
      qedsymbol = (fun _ -> inline-nil);
      space-after-label = ~(jlreq-length @`1zw`);
      proofname = { Example: };
      font-label = [bold;];
    |)

  let-block ctx +exapmle = JLReqProof.proof-scheme ctx example-config
  let-block ctx +remark =
    JLReqProof.proof-scheme ctx (|
      example-config with proofname = { Remark: };
    |)
  let-block ctx +note =
    JLReqProof.proof-scheme ctx (|
      example-config with proofname = { Note: };
    |)

  let-mutable figure-counter <- 0

  let caption-fig fig ?:label caption =
    let () = figure-counter <- !figure-counter + 1 in
    let () =
      match label with
        | None -> ()
        | Some(label) -> register-cross-reference (`fig:` ^ label ^ `:num`) (arabic !figure-counter) in
    let number = embed-string (arabic !figure-counter) in
      FigBox.vconcat ?:FigBox.align-center [
        fig;
        FigBox.gap 10pt;
        FigBox.textbox { Figure #number;: #caption; };
      ]

  let-inline \figref label =
    let label = `fig:` ^ label in { Figure \ref (label); }
end
